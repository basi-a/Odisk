server {
	# Nginx监听端口，当有请求到达该端口时，Nginx将会处理该请求。当客户端发送了请求过来后，Nginx会监听到该端口被占用，便会启用该server块去处理该请求
	listen 80;
    listen [::]:80;
	# 指定服务端的域名/IP，如果没有域名，则使用IP地址。当Nginx接收到一个请求时，首先会按照请求中的Host（或X-Forwarded-Host）头信息的域名取匹配server_name指令中的值，只要匹配上即可
	server_name _;

	charset utf-8;

	#把http的域名请求转成https
	return 301 https://$host$request_uri;
}

server {  
    listen 443 ssl; 
    listen  [::]:443;
    server_name _;

    ssl_certificate /opt/cert/server.crt;  
    ssl_certificate_key /opt/cert/server.key;  

    root /opt/dist; # 替换为 SPA 构建输出目录  
    index index.html; 

    charset utf-8;
    
    location / {  
        try_files $uri $uri/ /index.html; # 确保所有路由都返回 index.html  
    }  
    error_page  404              /404.html;
    error_page  500 502 503 504  /50x.html;


    ssl_session_cache shared:SSL:1m;
	ssl_session_timeout 5m;
	ssl_prefer_server_ciphers on;
	ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    # 如果你的应用需要与其他后端服务通信，你可能需要配置代理  
    # location /api/ {  
    #     proxy_pass http://backend_server_address;  
    #     proxy_set_header Host $host;  
    #     proxy_set_header X-Real-IP $remote_addr;  
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
    #     proxy_set_header X-Forwarded-Proto $scheme;  
    # }  
}